body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Dodatkowe style dla lepszego dzia≈Çania na urzƒÖdzeniach mobilnych */
* {
  -webkit-tap-highlight-color: transparent;
}

input, button, select, textarea {
  font-size: 16px; /* Zapobiega zoomowaniu na iOS */
}

/* Ukrycie paska adresu na urzƒÖdzeniach mobilnych */
@media screen and (max-width: 768px) {
  html {
    height: -webkit-fill-available;
  }
  
  body {
    height: -webkit-fill-available;
  }
} from 'react';
import BarcodeScanner from './components/BarcodeScanner';
import ProductDisplay from './components/ProductDisplay';
import './App.css';

function App() {
  const [isScanning, setIsScanning] = useState(false);
  const [productData, setProductData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // Obs≈Çuga wykrytego kodu kreskowego
  const handleBarcodeDetected = async (barcode) => {
    setIsScanning(false);
    setIsLoading(true);
    setError(null);
    
    try {
      // Pobierz dane produktu z Open Food Facts
      const response = await fetch(`https://world.openfoodfacts.org/api/v0/product/${barcode}.json`);
      const data = await response.json();
      
      if (data.status === 1) {
        setProductData({
          barcode: barcode,
          name: data.product.product_name || 'Nieznana nazwa',
          brand: data.product.brands || 'Nieznana marka',
          image: data.product.image_url || null,
          categories: data.product.categories || 'Brak kategorii',
          ingredients: data.product.ingredients_text || 'Brak informacji o sk≈Çadnikach',
          nutrition: {
            energy: data.product.nutriments?.energy_100g || 'Brak danych',
            fat: data.product.nutriments?.fat_100g || 'Brak danych',
            carbohydrates: data.product.nutriments?.carbohydrates_100g || 'Brak danych',
            proteins: data.product.nutriments?.proteins_100g || 'Brak danych'
          }
        });
      } else {
        setError('Produkt nie zosta≈Ç znaleziony w bazie danych');
      }
    } catch (err) {
      console.error('B≈ÇƒÖd podczas pobierania danych produktu:', err);
      setError('WystƒÖpi≈Ç b≈ÇƒÖd podczas pobierania danych produktu');
    } finally {
      setIsLoading(false);
    }
  };

  // Reset aplikacji
  const handleReset = () => {
    setProductData(null);
    setError(null);
    setIsScanning(false);
  };

  return (
    <div className="App">
      <header className="app-header">
        <h1>üõí Skaner Produkt√≥w</h1>
        <p>Zeskanuj kod kreskowy, aby zobaczyƒá informacje o produkcie</p>
      </header>

      <main className="app-main">
        {isLoading && (
          <div className="loading">
            <div className="spinner"></div>
            <p>Wyszukujƒô produkt...</p>
          </div>
        )}

        {error && (
          <div className="error">
            <p>‚ùå {error}</p>
            <button onClick={handleReset} className="button-secondary">
              Spr√≥buj ponownie
            </button>
          </div>
        )}

        {!isScanning && !productData && !isLoading && !error && (
          <div className="start-screen">
            <div className="scan-icon">üì±</div>
            <button 
              onClick={() => setIsScanning(true)} 
              className="button-primary"
            >
              Rozpocznij skanowanie
            </button>
          </div>
        )}

        {isScanning && (
          <BarcodeScanner 
            onDetected={handleBarcodeDetected}
            onCancel={() => setIsScanning(false)}
          />
        )}

        {productData && (
          <ProductDisplay 
            product={productData}
            onScanAgain={() => setIsScanning(true)}
            onReset={handleReset}
          />
        )}
      </main>
    </div>
  );
}

export default App;
